
* Project Overview
This is application is designed to use [[https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html][@RestController]] that will send and receive data via HTTP in order to interact with a mySQL database via [[https://spring.io/projects/spring-data-jpa][Sring JPA]]. The actual client side would be handled by a front end framework, such as React so that data can be updated live while users interact with that database. Optionally, [[https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/mvc.html][Spring MVC]] could be used with [[https://docs.spring.io/spring-framework/reference/web/webmvc-view/mvc-thymeleaf.html][Thymeleaf]] to handle the Admin or user clients. The application would also implement [[https://spring.io/projects/spring-security][Spring Security]] for user authentication, privileges and [[https://docs.spring.io/spring-security/reference/servlet/oauth2/index.html][OAuth]].

* UML Diagram
[[file:courier_service_uml.png]]

* RestController
Responses can be sent using an =@RestContoller= by sending an Entity class that implements Spring JPA. You can also implement it using =@ResponseBody= like so:

#+begin_src java
@GetMapping("/products")
@ResponseBody
public ResponseEntity<List<Products>> getProducts() {
    return ResponseEntity.ok(userRepository.findAll());
}
#+end_src

* SOLID
** Single responsibility
I have separated out the responsibility of controllers, repositories, services into different classes and packages. I also separated user and admin controllers into separate packages to maintain single responsibility on both the class and package level. Using services for more complex operations instead of using the controllers means that controllers are restricted to dealing with controller related activities, receiving HTTP requests and sending HTTP responses, while managing stock or returns are separated out to their own services. In cases where operates are limited to simply returning a data of a SQL query, the repository implementations themselves can handle this behaviour.

** Open-Closed Principle
All of the entities are extendable both by extending the class and by setting up joins in the database. 

** Liskov-Substitution
Carefully using aggregation to construct the relationship between users, orders, and addresses, means that users can exist without orders or addresses, but orders must exist with a user and an address. If orders were contained within a list on a user, users could exist with an empty orders list, which would violate this rule.

** Interface Segregation
The interfaces are small and only need to be used by the appropriate controllers. Controllers that do not need service interfaces do not depend on them. By using =@ResponseBody= and =@RestController= on the appropriate controllers, only those controllers that need to use the =@ResponseBody= interface depend on it.

** Dependency Inversion
The direct usage of interfaces instead of classes means limits the dependency of high level interfaces on low level dependencies is limited. Using interfaces that take data structures or atomic types as arguments and return data structures or atomic types means further limits dependency on methods between high level interfaces.
